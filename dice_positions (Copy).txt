import cv2
import numpy as np
import json
import time
import sys
import subprocess
import os

sys.path.append('../fanuc_ethernet_ip_drivers/src')
from robot_controller import robot as Robot

system_python = "/usr/bin/python3"

# Beaker robot's IP address
robot_ip = '172.29.208.124'

# Define z-heights for the Beaker robot
z1, z11 = -30.0, -125.0

# Define 3x3 grid of dice positions within the boundary points
dice_positions_beaker = [
    ([283.75, 467.83, z1], [283.75, 467.83, z11]),
    ([467.5, 467.83, z1], [467.5, 467.83, z11]),
    ([651.25, 467.83, z1], [651.25, 467.83, z11]),
    ([283.75, 686.67, z1], [283.75, 686.67, z11]),
    ([467.5, 686.67, z1], [467.5, 686.67, z11]),
    ([651.25, 686.67, z1], [651.25, 686.67, z11]),
    ([283.75, 905.5, z1], [283.75, 905.5, z11]),
    ([467.5, 905.5, z1], [467.5, 905.5, z11]),
    ([651.25, 905.5, z1], [651.25, 905.5, z11])
]

# Center the dice with the gripper before pickup
def center_dice(robot, position):
    """Adjust the dice to be centered using the gripper before pickup."""
    Dice_Home = [465.0, -2.0, -185.0, -179.9, 0.0, 30.0]
    robot.schunk_gripper('open')
    robot.write_cartesian_position([Dice_Home[0], Dice_Home[1], z1, Dice_Home[3], Dice_Home[4], Dice_Home[5]])
    robot.write_cartesian_position(Dice_Home)
    robot.write_cartesian_position([Dice_Home[0]-40, Dice_Home[1], Dice_Home[2], Dice_Home[3], Dice_Home[4], Dice_Home[5]])  # Slightly above dice
    robot.schunk_gripper('close')
    time.sleep(0.25)
    robot.schunk_gripper('open')
    time.sleep(0.25)
    robot.write_cartesian_position([Dice_Home[0]+40, Dice_Home[1], Dice_Home[2], Dice_Home[3], Dice_Home[4], Dice_Home[5]])
    robot.schunk_gripper('close')
    time.sleep(0.25)
    robot.schunk_gripper('open')
    time.sleep(0.25)
    robot.write_cartesian_position([Dice_Home[0], Dice_Home[1], Dice_Home[2]+40, Dice_Home[3], Dice_Home[4], Dice_Home[5]])
    robot.write_cartesian_position([Dice_Home[0], Dice_Home[1], Dice_Home[2]+40, Dice_Home[3], Dice_Home[4], Dice_Home[5]+90])
    robot.write_cartesian_position([Dice_Home[0], Dice_Home[1]+40, Dice_Home[2], Dice_Home[3], Dice_Home[4], Dice_Home[5]+90])  # Slightly above dice
    robot.schunk_gripper('close')
    time.sleep(0.25)
    robot.schunk_gripper('open')
    time.sleep(0.25)
    robot.write_cartesian_position([Dice_Home[0], Dice_Home[1]-40, Dice_Home[2], Dice_Home[3], Dice_Home[4], Dice_Home[5]+90])
    robot.schunk_gripper('close')
    time.sleep(0.25)
    robot.schunk_gripper('open')
    time.sleep(0.25)
    robot.write_cartesian_position([Dice_Home[0], Dice_Home[1], Dice_Home[2], Dice_Home[3], Dice_Home[4], Dice_Home[5]+90])
    robot.schunk_gripper('close')
    robot.write_cartesian_position([Dice_Home[0], Dice_Home[1], z1, Dice_Home[3], Dice_Home[4], Dice_Home[5]+90])
    time.sleep(0.25)
    print("Dice centered and gripper closed.")

def get_robot_cords(robot_ip) -> list:
    robot = Robot(robot_ip)
    cords = robot.read_current_cartesian_pose()
    xy_cords = cords[:2]
    return xy_cords

# Capture image and process it to find dice pixel coordinates
def get_image_cords(image_path, robot_ip, output_file) -> np.ndarray:
    # Load in image
    img = cv2.imread(image_path)
    # Convert to HSV for color mapping
    image_hsv = cv2.cvtColor(img,cv2.COLOR_BGR2HSV)
    # Lightly blur the image
    image_hsv_blur = cv2.GaussianBlur(
        image_hsv,
        (5,5),
        1
    )
    # Mask out anything not in a yellow-ish color range
    lower_yellow = np.array([ 28, 255, 150])
    upper_yellow = np.array([ 50, 255, 255])
    mask = cv2.inRange(image_hsv_blur, lower_yellow, upper_yellow)
    # Get the contours in the image
    contours, _ = cv2.findContours(
        mask,
        cv2.RETR_EXTERNAL,
        cv2.CHAIN_APPROX_NONE
    )
    dice_image_cords: list = []
    dice_robot_cords: list = []
    # Gather Dice cordinates and generate mapping
    for cnt in contours:
        # Calculate the area
        area = cv2.contourArea(cnt)
        if area < 5000:
            # If area is to small filter it out as its just an
            # image artifact
            continue
        # Create img copy to draw on
        output = img.copy()
        # Calculate the center of the bounding box
        moment = cv2.moments(cnt)
        cx = int((moment['m10']/moment["m00"]))
        cy = int((moment['m01']/moment["m00"]))
        current_image_cord = [cx,cy]
        # Create the rectangle
        rect = cv2.minAreaRect(cnt)
        box = np.intp(cv2.boxPoints(rect))
        # Draw the rectangle
        cv2.drawContours(output, [box], -1, (0, 255, 0), 3)
        # Display the output image
        cv2.imshow("Current Dice", output)
        print(f"Dice Cordinates: {current_image_cord}")
        print("Please Move Robot to current Selected Dice")
        input("Hit Enter when robot is in the correct position")
        # Read the robots Cordinates
        current_robot_cords = get_robot_cords(robot_ip)
        print(f"Robot Cordinates: {current_robot_cords}")
        # Add the cordinates
        dice_image_cords.append(current_image_cord)
        dice_robot_cords.append(current_robot_cords)

    # Calculate the transformation matrix
    src_cords = np.array(dice_image_cords)
    dst_cords = np.array(dice_robot_cords)
    tranform_matrix = cv2.findHomography(
        srcPoints=src_cords,
        dstPoints=dst_cords,
        method=cv2.RANSAC,
        confidence=0.9
    )
    print("Calculated Transformation Matrix:")
    print(tranform_matrix)
    with open(output_file, mode="w") as fd:
        fd.write(str(tranform_matrix))
    return tranform_matrix

# Move dice to each position, record coordinates, and calculate transformation
def place_and_record_dice_positions():
    robot = Robot(robot_ip)
    home_pose = [0, 0, 0, 0, -90, 30]
    robot.write_joint_pose(home_pose)  # Move to home position

    dice_robot_coords = []
    for i, (dice_high, dice) in enumerate(dice_positions_beaker, start=1):
        center_dice(robot, dice)  # Center the dice before pickup

        # Pick up the dice
        robot.write_cartesian_position(dice_high)
        
        # Place dice in grid position
        robot.write_cartesian_position(dice)  # Lower to grid position
        robot.schunk_gripper('open')  # Release dice
        time.sleep(0.5)
        robot.write_cartesian_position(dice_high)  # Move up after placing

        # Record robot coordinates for the dice
        current_coords = robot.read_current_cartesian_pose()[:2]  # Get x, y coordinates
        dice_robot_coords.append(current_coords)
        print(f"Recorded robot coordinates for dice {i}: {current_coords}")

    robot.write_joint_pose(home_pose)  # Return to home position
    return dice_robot_coords

# Main function to execute the process
def main():
    # Place dice in grid and record robot coordinates
    dice_robot_coords  = place_and_record_dice_positions()

    # Use system-wide Python interpreter for Dice_Identification.py
    subprocess.run(["/usr/bin/python3", "/home/funkey/ME-559/College/Lab 5/Dice_Identification.py"])
    time.sleep(1)
    cv2.namedWindow('Current Dice', cv2.WINDOW_NORMAL)
    get_image_cords(
        image_path = "./dice.png",
        robot_ip = robot_ip,
        output_file= "transform_mat.txt"
    )

if __name__ == '__main__':
    main()

